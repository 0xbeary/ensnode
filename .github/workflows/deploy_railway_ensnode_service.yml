name: Build and deploy to Railway ENSNode service

on:
  push:
    branches:
      - feat/railway-ensnode-deployments
      # Build and push'latest' Docker image. Skip deployments
      - main
      # Build and push 'alpha' Docker image. Update 'alpha' Railway shared environment variables.
      - alpha
      # Build and push 'subgraph' Docker image. Update 'subgraph' Railway shared environment variables.
      - subgraph

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine_tag.outputs.TAG }}
      svc_id: ${{ steps.determine_tag.outputs.SVC_ID }}
      docker_image_id: ${{ steps.determine_tag.outputs.DOCKER_IMAGE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Branch Name
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    
      # We need to recognize which branch had an incoming push
      # Based on that create Docker image with corresponding label - use TAG variable for this
      # For alpha/subgraph TAG we need also to specify corresponding Railway SVC_ID which is used for service redeployment
      - id: determine_tag
        run: |
            case "$BRANCH" in
              "main")
                echo "TAG=latest" >> $GITHUB_ENV
                ;;
              "alpha")
                echo "TAG=alpha" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.ALPHA_SVC_ID }} >> "$GITHUB_OUTPUT"
                ;;
              "subgraph")
                echo "TAG=subgraph" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.SUBGRAPH_SVC_ID }} >> "$GITHUB_OUTPUT"
                ;;
              "feat/railway-ensnode-deployments")
                echo "TAG=subgraph" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.SUBGRAPH_SVC_ID }} >> "$GITHUB_OUTPUT"
                ;;
              *)
                echo "Branch not recognized, skipping workflow"
                exit 1
            esac
            echo "TAG="$TAG >> "$GITHUB_OUTPUT"
            echo "SVC_ID="testing >> "$GITHUB_OUTPUT"

      - name: Build & Push Docker image for ENSNode to Github Container registry
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}/ensnode
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -f apps/ensnode/Dockerfile -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
          DOCKER_IMAGE_ID=`docker inspect --format={{.ID}} $IMAGE_NAME:$TAG`
          echo "DOCKER_IMAGE_ID=$DOCKER_IMAGE_ID" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: image-build-and-push
    if:  ${{ needs.image-build-and-push.outputs.svc_id != '' }} 
    env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID}}
        TAG: ${{ needs.image-build-and-push.outputs.tag }}
        SVC_ID: ${{ needs.image-build-and-push.outputs.svc_id }}
        DOCKER_IMAGE_ID: ${{ needs.image-build-and-push.outputs.docker_image_id }}
    steps:
      - name: Deploy if necessary
        run: |
          # Send Railway API request to get all shared variables. We need those to check if we really need to redeploy.
          API_RESPONSE=`curl --request POST \
          --silent \
          --url https://backboard.railway.app/graphql/v2 \
          --header 'Project-Access-Token: '${{ env.RAILWAY_TOKEN }} \
          --header 'Content-Type: application/json' \
          --data '{
            "query": "query variables($projectId: String!, $environmentId: String!) { variables(projectId: $projectId, environmentId: $environmentId) }",
              "variables": {
                "projectId": "'${{ env.RAILWAY_PROJECT_ID }}'" ,
                "environmentId": "'${{ env.RAILWAY_ENVIRONMENT_ID }}'"
              }
          }'`
          TAG=${{ env.TAG }}
          echo "Before uppercase: ${TAG}"
          TAG=${TAG^^}
          echo ${After uppercase ${TAG}}
          VARIABLE_NAME=${TAG^^}_DATABASE_SCHEMA
          echo "Looking for: ${VARIABLE_NAME} environment variable"
          # Filter all env variables from response except one that is defining schema for specific deployment.
          CURRENT_SCHEMA=`${API_RESPONSE} | jq '.data.variables.'${VARIABLE_NAME}`
          #TODO FOR NOW JUST REPLACE DOCKER IMAGE ID. EXTEND LOGIC IN FUTURE
          # Check if newly calculated schema matches old one, if not replace env variable and force deployment. Otherwise skip deploymen.
          if [[ "$CURRENT_SCHEMA" != "${{ env.DOCKER_IMAGE_ID }}" ]]; then
          # Sending Railway API request to update specifc shared variable
          curl --request POST \
              --silent \
              --url https://backboard.railway.app/graphql/v2 \
              --header 'Project-Access-Token: '${{ env.RAILWAY_TOKEN }} \
              --header 'Content-Type: application/json' \
              --data '{"query": "mutation variableUpsert { variableUpsert(input: { projectId: \"'${{ env.RAILWAY_PROJECT_ID }}'\", environmentId: \"'${{ env.RAILWAY_ENVIRONMENT_ID }}'\", name: \"'${VARIABLE_NAME}'\", value: \"${{ env.DOCKER_IMAGE_ID }}\" }) }"}'
          else
              echo "Skipping environment variable update. No new deployment needed"
          fi

          
            