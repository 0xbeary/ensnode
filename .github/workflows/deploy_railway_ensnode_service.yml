name: Build and deploy to Railway ENSNode service

on:
  push:
    branches:
      - feat/railway-ensnode-deployments
      # Build and push'latest' Docker image. Skip deployments
      - main
      # Build and push 'alpha' Docker image. Update 'alpha' Railway shared environment variables.
      - alpha
      # Build and push 'subgraph' Docker image. Update 'subgraph' Railway shared environment variables.
      - subgraph

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Branch Name
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    
      # We need to recognize which branch had an incoming push
      # Based on that create Docker image with corresponding label - use TAG variable for this
      # For alpha/subgraph TAG we need also to specify corresponding Railway SVC_ID which is used for service redeployment
      - name: Determine Docker image tag
        run: |
            case "$BRANCH" in
              "main")
                echo "TAG=latest" >> $GITHUB_ENV
                ;;
              "alpha")
                echo "TAG=alpha" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.ALPHA_SVC_ID }} >> "$GITHUB_ENV"
                ;;
              "subgraph")
                echo "TAG=subgraph" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.SUBGRAPH_SVC_ID }} >> "$GITHUB_ENV"
                ;;
              "feat/railway-ensnode-deployments")
                echo "TAG=subgraph" >> $GITHUB_ENV
                echo "SVC_ID="${{ secrets.SUBGRAPH_SVC_ID }} >> "$GITHUB_ENV"
                ;;
              *)
                echo "Branch not recognized, skipping workflow"
                exit 1
            esac

      - name: Build & Push Docker image for ENSNode to Github Container registry
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}/ensnode
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -f apps/ensnode/Dockerfile -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG

      - name: Determine Railway variable to be updated
        run: |
          TAG=${{ env.TAG }}
          VARIABLE_NAME=${TAG^^}_DATABASE_SCHEMA
          echo "Looking for: ${VARIABLE_NAME} environment variable"
          echo "VARIABLE_NAME=$VARIABLE_NAME" >> "$GITHUB_ENV"
      
      - name: Get current Railway schema
        run: |
          # Send Railway API request to get all shared variables. We need those to check if we really need to redeploy.
          API_RESPONSE=`curl --request POST \
          --silent \
          --url https://backboard.railway.app/graphql/v2 \
          --header 'Project-Access-Token: '${{ env.RAILWAY_TOKEN }} \
          --header 'Content-Type: application/json' \
          --data '{
            "query": "query variables($projectId: String!, $environmentId: String!) { variables(projectId: $projectId, environmentId: $environmentId) }",
              "variables": {
                "projectId": "'${{ env.RAILWAY_PROJECT_ID }}'" ,
                "environmentId": "'${{ env.RAILWAY_ENVIRONMENT_ID }}'"
              }
          }'`
          # Filter all env variables from response except one that is defining schema for specific deployment.
          RAILWAY_SCHEMA=`echo ${API_RESPONSE} | jq '.data.variables.'${{ env.VARIABLE_NAME }}`
          echo "RAILWAY_SCHEMA=$RAILWAY_SCHEMA" >> "$GITHUB_ENV"
          

      #TODO FOR NOW JUST REPLACE github.sha. EXTEND LOGIC IN FUTURE
      - name: Update Railway schema variable
        # Check if newly calculated schema matches old one, if not replace env variable and force deployment. Otherwise skip deploymen.
        run: |
          # Sending Railway API request to update specifc shared variable
          if[[ ${{env.RAILWAY_SCHEMA}} != ${{ github.sha }} ]]; then
          curl --request POST \
              --silent \
              --url https://backboard.railway.app/graphql/v2 \
              --header 'Project-Access-Token: '${{ env.RAILWAY_TOKEN }} \
              --header 'Content-Type: application/json' \
              --data '{"query": "mutation variableUpsert { variableUpsert(input: { projectId: \"'${{ env.RAILWAY_PROJECT_ID }}'\", environmentId: \"'${{ env.RAILWAY_ENVIRONMENT_ID }}'\", name: \"'${VARIABLE_NAME}'\", value: \"${{ github.sha }}\" }) }"}'
          else
          echo "Skipping deployment since schema did not changed"
          fi
